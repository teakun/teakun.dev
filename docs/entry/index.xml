<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entries on teakun.dev</title>
    <link>https://teakun.dev/entry/</link>
    <description>Recent content in Entries on teakun.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 13 Dec 2020 18:00:00 +0900</lastBuildDate><atom:link href="https://teakun.dev/entry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>月刊秘伝 12月号</title>
      <link>https://teakun.dev/entry/2020-12-13-hiden/</link>
      <pubDate>Sun, 13 Dec 2020 18:00:00 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-12-13-hiden/</guid>
      <description>最近、普段買わないような分野の雑誌を買ってみる遊びをしている。 ほとんど知らない分野なので意外な発見があったり、自分の得意な分野とのちょっとした共通点が見つけられたりしておもしろい。最近読んだのが「月刊秘伝」という雑誌。この雑誌では武道全般を扱っていて、その中でも&amp;quot;秘伝&amp;quot;とされている技について教えてくれる。12月号は&amp;quot;居合・抜刀&amp;quot;特集ということで、居合斬りについて色んな角度から特集されていた。
   秘伝公式サイトより。特集されていた居合の演武が見れる 特に剣道をやっていたわけではないので、体捌きの説明とかは見てもよくわからなかったけど、居合斬りで剣を早くするためのアプローチの話がおもしろかった。剣を早くするためのアプローチは大きく分けると2つになって、1つは剣の動き自体を速く動かすこと、もう1つは剣の体感の速度を上げること、らしい。この話を読んで、スマホアプリの高速化の話と似てるなと思った。アプリで例えると、剣の動きを速くするのはAPIのレスポンスを速くすること、剣の体感の速度を上げるのはアプリのローディング中にアニメーションを見せることに似てる。まあ、似てるなと思っただけで仕事に活かせるような教訓はない…
居合だけでもいろんな流派の師範が出てくる。1つ2つとかではなくて10以上の流派が出てて、居合だけでこんなにあるのかと驚いた。 解説している師範のプロフィールの欄をよく読むと、1人で複数の流派を継承している人が複数いた。 中には第十何代〇〇流師範、第三十何代〇〇流継承者、みたいな肩書を一人で4つくらい兼務してる人もいる。 継承できるような人が減っているから自然とこうなるんだろうけど、これだけ兼ねると説得力に欠ける気がする。北斗神拳と南斗聖拳を両方継承している使い手はいない。
あと、新陰流という居合の流派が紹介されてた。三輪ちゃんの元ネタかな。</description>
    </item>
    
    <item>
      <title>SwiftのPropertyWrapperを知る</title>
      <link>https://teakun.dev/entry/2020-12-08-swift-propertywrapper/</link>
      <pubDate>Tue, 08 Dec 2020 00:48:36 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-12-08-swift-propertywrapper/</guid>
      <description>PropertyWrapperについて1から勉強。
一番シンプルなパターン まずは一番かんたんな例から。始めは色のRGBを表す場合を考えてみる。それぞれの値は0~255で表されていて、それ範囲外の値が来た場合は範囲に収まるようにしたい。ここではRGBを表すためのPropertyWrapperとして、ColorValueを定義する。
@propertyWrapper struct ColorValue { private var value: Int init() { value = 0 } var wrappedValue: Int { get { return value } set { value = min(255, max(0, newValue)) } } } struct Color { @ColorValue var r: Int // @ColorValueのwrappedValueの型と変数の型が一致しないといけない @ColorValue var g: Int @ColorValue var b: Int } var color = Color() color.r = 100 print(color.r) // 100 color.g = 999 print(color.g) // 355 color.</description>
    </item>
    
    <item>
      <title>multipart/form-data入門</title>
      <link>https://teakun.dev/entry/2020-12-02-multipartformdata/</link>
      <pubDate>Wed, 02 Dec 2020 01:43:18 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-12-02-multipartformdata/</guid>
      <description>仕事でmultipart/form-dataでファイルアップロードをする実装することになったけど、どういうものか全然わかっていないので調べる。
そもそもなにか HTTPのリクエストで複数のデータをまとめて送るための仕組み。 例えば、プロフィールを登録するような場合に、名前と画像をセットでアップロードするようなときに使う。
header Content-Typeにはこのような指定が入る。
Content-Type: multipart/form-data; boundary=--&amp;lt;バウンダリ文字列&amp;gt;\r\n バウンダリ文字列というのがミソで、これが送信したい複数のデータの区切りになる。 なので、この文字列はデータ中には出てこないような無難な乱数が入るのがよい。
body bodyの例。1つ目にテキスト、2つ目に画像を送るような場合で考える。
--&amp;lt;バウンダリ文字列&amp;gt;\r\n Content-Disposition: form-data; name=&amp;quot;&amp;lt;1つ目の名前&amp;gt;&amp;quot;\r\n \r\n &amp;lt;1つ目のデータ&amp;gt; --&amp;lt;バウンダリ文字列&amp;gt;\r\n Content-Disposition: form-data; name=&amp;quot;&amp;lt;2つ目名前&amp;gt;&amp;quot;; filename=&amp;quot;&amp;lt;ファイル名&amp;gt;&amp;quot;\r\n Content-Type: image/jpeg\r\n \r\n &amp;lt;画像のバイナリ&amp;gt; --&amp;lt;バウンダリ文字列&amp;gt;--\r\n  headerで定義したバウンダリ文字列でデータの区切りを表す。バウンダリ文字列は--から始めないといけない制約がある。 すべての改行は\r\nにする。(この改行の方法をCRLFと呼ぶらしい) 各データの先頭ではContent-Dispositionを指定していて、これがそのデータの情報を表している。あとは必要に応じてContent-Typeなどを指定する。 区切りの最後にもバウンダリ文字列を追加を追加する必要がある。この場合はバウンダリ文字列の最後にも--をつけないといけない。  参考  https://satox.hatenadiary.jp/entry/20110726/1311665904 https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition https://marusunrise2.blogspot.com/2014/06/lfcrcrlf.html  </description>
    </item>
    
    <item>
      <title>ブログ作った</title>
      <link>https://teakun.dev/entry/2020-11-24-start-blog/</link>
      <pubDate>Tue, 24 Nov 2020 23:59:35 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-11-24-start-blog/</guid>
      <description>新しくブログを作った。
一年くらい前まで使っていたはてなブログは今はちょっと勢いがなさそうで、使い続けるのは微妙かな、と思うようになってしまった。 他のブログプラットフォームを調べてみたりもしたけど、今どきはnoteだ！notionだ！とか、新興勢力が出てきて何がなんやらよくわからない。 他のプラットフォームに乗り換えたとしても、また新しい勢力が出てくるのは目に見えている。そんなことを気にしながらブログ書くらいなら、ちょうどweb技術のお勉強にもなりそうだしいっそ自分で作るか〜となった。 で、今回の新ブログにいたる。
新しくブログを作るにあたって、以下のようなことを考えた。
 維持費がかからないか メンテナンスが楽かどうか  wordpressとかはアップデートとかあるよね？重いしめんどくさい   いざとなった脱出しやすいかどうか  独自記法だと他のブログに移行するのが難しい markdownで書きたい    ということで新ブログはとりあえずHugo + Github Pagesで作ってみた。 そのうち独自ドメインとかも取って当ててみたい。
しょうもないけど、Hugoでは記事のパスを自分で決めないといけなくて、ここでちょっと悩んだ。 結果的には $HOME/entry/{記事} にした。 どこに悩むポイントがあるかというと、entry の部分。他の候補としてはposts、articlesあたり。 意外とこれ悩みどころじゃない？ 自分は文字数の少なさと何となくの好みでentryにした。 調べてるとこういう記事もあったりする。 でも結局は好みだし好きなやつにしたらいいよね・・・</description>
    </item>
    
  </channel>
</rss>
