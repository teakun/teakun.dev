<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entries on teakun.dev</title>
    <link>https://teakun.dev/entry/</link>
    <description>Recent content in Entries on teakun.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Thu, 21 Apr 2022 00:57:28 +0900</lastBuildDate><atom:link href="https://teakun.dev/entry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【flutter】Rowの中に入れたTextを余っているスペースいっぱいに表示したい</title>
      <link>https://teakun.dev/entry/2022-04-21-flutter-text-in-row-layout/</link>
      <pubDate>Thu, 21 Apr 2022 00:57:28 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2022-04-21-flutter-text-in-row-layout/</guid>
      <description>考えるのは以下のようなケース。
 3つ要素が並んでいて、左右の要素は左右にピッタリ配置 中間の要素はテキストで可変になっていて、スペースが余っている限りいっぱいに表示したい テキストは左寄せで表示   成功   うまく行ったパターン Row( crossAxisAlignment: CrossAxisAlignment.center, mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Container(), // 先頭の要素  Flexible( child: Container( width: double.infinity, padding: const EdgeInsets.only(left: 8), child: Text( &amp;#34;あああああああああああああああああああああああああああああああああ&amp;#34;, overflow: TextOverflow.ellipsis, ), ), ), Container(), // 末尾の要素  ], ), 中間のTextをFlexibleで囲んで、Containerの幅をdouble.infinityにする。 infinityを指定しているからめいっぱいに広がるけど、Flexibleで囲んでいるから要素がoverflowを起こさない。
うまく行かなかったパターン Row( crossAxisAlignment: CrossAxisAlignment.center, mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Container(), // 先頭の要素  Flexible( child: Container( width: double.infinity, padding: const EdgeInsets.only(left: 8), child: Text( &amp;#34;あああああああああああああああああああああああああああああああああ&amp;#34;, overflow: TextOverflow.</description>
    </item>
    
    <item>
      <title>2021</title>
      <link>https://teakun.dev/entry/2021-12-31-2021/</link>
      <pubDate>Fri, 31 Dec 2021 12:50:04 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2021-12-31-2021/</guid>
      <description>去年もやったので今年も軽くやる。
コロナ かなりコロナが落ち着いて外に出歩く機会が戻ってきた。 今年は2年ぶり地元への帰省もできた。 まだまだ元通りとは行かないけど、このまま収束していってほしい。
仕事 今年は副業にチャレンジした。 水産系のITベンチャーにお世話になって、4月~10月でflutter + railsの開発をした。 新卒4年目になって他の会社がどんな様子が気になっていたこと、flutter・BEの経験を積みたかったことなど、欲しかった経験をまとめて得られてためになった。 flutterもrailsもほぼ未経験の状態から雇ってもらえてありがたかった。今はその会社とはサヨナラしてしまったけどいい経験になった。 来年頭からは別の会社で副業させてもらえる話が進んでいてそちらも楽しみ。
ということで今年は特にflutter, railsを一通り触れるようになったのが成長だった。 両方やりたいと思っていたことだったので良かった一方で、いかにもベンチャーで働きまっせ、みたいな知識ばかり入っているのはちょっと考えどころ。 最終的に自分がそういうところで働きたいのか？というのはよく考えたほうがよさそう。来年は長い目で見て役に立ちそうなことを勉強していきたい。
本業の方はこの1年で自分の仕事はそれほど変わらなかった。もうすぐで5年目になるのでもっと変化をつけていきたい。
生活 変わらず東京に住んでいる。今の住まいはなかなか住心地がよい。どうせリモートワークなのでどこに住んでもよいけど、当面はこのままになりそう。 この1年は家電を買って生活が豊かになるのを感じられたのが良かった。特に洗濯乾燥機は革命だった。ドラムに全部入れるだけでホカホカでパリパリに乾いた服が出てくる。洗剤を自動で投入してくれるのもよいですね。みんな買いましょう。
2022 そろそろ30代も近い。ぼちぼちがんばるぞ。</description>
    </item>
    
    <item>
      <title>GoogleMobileAdsアップデート(7.67.0 -&gt; 8.12.0)</title>
      <link>https://teakun.dev/entry/2021-11-14-googlemobileads-update/</link>
      <pubDate>Sun, 14 Nov 2021 16:29:01 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2021-11-14-googlemobileads-update/</guid>
      <description>iOSの話。 久しぶりにGoogleMobileAdsSDKのアップデートをしたらIFが変わっていたのでメモ。
interstatial  https://developers.google.com/admob/ios/full-screen-migration?hl=ja  ベータ版のときのドキュメント GADInterstitialAdBetaをGADInterstitialAdに読み替えるとそのまま使える これまではinterstatialが読込中・読み込み完了の状態を持つようになっていたが、広告の読み込みが完了したときだけインスタンスが取得できるようになった    banner  デリゲートメソットのネーミングが刷新  # before func adViewDidReceiveAd(_ bannerView: GADBannerView) {} # after func bannerViewDidReceiveAd(_ bannerView: GADBannerView) {} 手元の環境では大体対応するメソッドがあるので置き換えて完了した。</description>
    </item>
    
    <item>
      <title>【iOS】admobのアダプティブバナーでレイアウトが可変にならなかった問題</title>
      <link>https://teakun.dev/entry/2021-03-08-admob-adaptivebanner-layout/</link>
      <pubDate>Mon, 08 Mar 2021 00:03:52 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2021-03-08-admob-adaptivebanner-layout/</guid>
      <description>タイトルのまま。 基本的に公式のマニュアルの通りにやれば間違いないがしょうもないハマりどころがあった。
起きた問題  前提: iOS, UIKit,autolayout 以下のようにadSizeを更新してもレイアウトが320*50で固定されてしまう  bannerView.adSize = GADCurrentOrientationAnchoredAdaptiveBannerAdSizeWithWidth(viewWidth) 原因 autolayoutでバナーのviewに対してwidth=320,height=50の制約を貼ってしまっていたため。元々のバナーの320*50の制約が残っていてadSizeを更新してもその制約が優先されるようになっていた。 勝手に更新してくれるのかと思ったけどそんなことはない。
対応 width=320,height=50の制約を剥がす。そのままではviewのレイアウトが定まらずにエラーが出てしまうのでintrinsic sizeのPlaceholderに仮の値を入れておくとよい。 intrinsic sizeについてはこの記事が詳しくて分かりやすい。  ちなみにサンプルコードを実際に開いてみるとintrinsic sizeを入れる方法で実装してあった。</description>
    </item>
    
    <item>
      <title>最近読んだ本とか</title>
      <link>https://teakun.dev/entry/2021-02-06-reading/</link>
      <pubDate>Sat, 06 Feb 2021 23:04:51 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2021-02-06-reading/</guid>
      <description>最近読んだ本とその感想を書く。今年はたくさん本を読むつもり。
関係ないけどamazonのタイムセールで買ったKindle Oasisがなかなか快適。 軽くて目に優しいので楽だし、何より防水で風呂に持ち込んで本を読めるのが良い。
いつも「時間がない」あなたに 欠乏の行動経済学 人は余裕がないと目の前にしか集中できなくなり、他へ目が回らなくなってさらに余裕がなくなっていく欠乏の悪化を引き起こしてしまう。 というような余裕がない状態について研究した本。余裕がないと直近の心配事を解消するためにリソースが奪われてしまうという話があって心当たりがありすぎる。
ツベルクリンムーチョ (森博嗣) 100編からなるエッセイ集。シリーズ9作目？らしい。 エッセイでは時事的なことはなるべく避けるでおなじみの森博嗣だけど珍しく時事的な話題としてコロナについて触れる内容が多かったのが印象的。もっとも書いてる内容はいつもと同じ…
桜井政博のゲームについて思うこと 2015-2019 スマブラのディレクターの桜井さんがファミ通で連載しているコラムを5年分まとめたもの。 ファミコン時代の苦労話、スマブラの開発の様子、プレイしたゲームの感想などなどいろいろな話が詰まっていて面白かった。連載のまとめなので一回分が見開き2ページになっているのが読みやすくてよい。
自分の中に毒を持て (岡本太郎) タイトルは聞いたことがあったので読んでみた。前半は岡本太郎の人生観が詰まっていて、自分も頑張るぞ！という気持ちになれた。燃える内容で集中して読めたけど、過去に付き合ってきた女の話が途中からひたすら続いていてなんじゃこりゃとなった。それを除けばなかなか面白かったです。</description>
    </item>
    
    <item>
      <title>20210123</title>
      <link>https://teakun.dev/entry/2021-01-23-ghostintheshell/</link>
      <pubDate>Sat, 23 Jan 2021 00:18:34 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2021-01-23-ghostintheshell/</guid>
      <description>年始ぐらいから攻殻機動隊のSACシリーズをひたすら観ていて、最近やっと見終わった。 攻殻機動隊、名前は知っていたけど何となく観ていなかったアニメ。メカにネットにアクションにと大好きなテーマがてんこ盛りといったところでめちゃくちゃ面白かった。もっと早く観たら良かった。 大きな話の間に単発の話も混ざったりと変化があって、全体を通して飽ることもなかった。 自分は単発の話が好き。 基本的に仕事の昼休憩の時間にみていたけれど、いつの間にか昼休憩にアニメを見る習慣がついた。攻殻機動隊を観終わってからも別のアニメを探しては昼にずっと見ている。なんとなく生活が豊かになったような気がする。
あとから押井守の映画版も観たけど、こっちは話が難しくてついていけないところがあった… また思い出したときに観る。</description>
    </item>
    
    <item>
      <title>Xcode source editor extensionを試した記録</title>
      <link>https://teakun.dev/entry/2021-01-10-try-xcodesourceeditorextension/</link>
      <pubDate>Sun, 10 Jan 2021 22:16:39 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2021-01-10-try-xcodesourceeditorextension/</guid>
      <description>試してみたので過程を残しておく。
エディタ上で選択した範囲からその部分がハイライトされるGitHubのリンクを生成するExtensionを作りたかったが、それはできないということが分かって残念。 環境はBigSur11.1でXCode12.3。
ビルドするまで まずはこのあたりの資料を参考にシンプルなプロジェクトを作ってみる。2017年とちょっと古い資料だけど、基本的な部分は変わっていない。とても参考になった。
 https://speakerdeck.com/takasek/20170916-number-iosdc https://github.com/takasek/XcodeExtensionSample  これを元にシンプルなプロジェクトができたけど、そのままだとXCodeがクラッシュ、コマンドが認識されないなどの問題が起きた。
XCode12以降でビルドできない問題 extensionを作るためにはXCodeKit.frameworkを使う必要があるけれど、XCode12以降ではそれがembedになっている必要がある。
 For compatibility with new security features in macOS 11, Xcode extensions must be built using Xcode 12 and must embed XcodeKit.framework. An Xcode extension rebuilt with these tools remains compatible with older versions of Xcode and macOS.
  https://developer.apple.com/documentation/xcode-release-notes/xcode-12-release-notes  ということで、Embedの設定をEmbed &amp;amp; Signに変えてやるとよい。  一応他にも同じ問題で困っている人がいるようだった。
Extensionの権限がない問題 上の設定の問題が解消してビルドができるようになったが、自分の環境ではまだ新しく作ったコマンドがXCodeで表示されない問題があった。 どうやら作ったExtensionにmacOS自体の機能拡張の権限が渡っていなかったのが原因。  システム環境設定 -&amp;gt; 機能拡張 -&amp;gt; XCode Source Editorから作ったExtensionのチェックを入れ直して解決。</description>
    </item>
    
    <item>
      <title>2020</title>
      <link>https://teakun.dev/entry/2020-12-31-2020/</link>
      <pubDate>Thu, 31 Dec 2020 22:09:42 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-12-31-2020/</guid>
      <description>ちょっとだけ振り返る。
コロナ 2020はなんといっても新型コロナウイルスの年だった。 ほとんど会社に行かずとも仕事が完結してしまったこともあり、外出することが激減した。 人と直接話す機会も減って、もちろん外に遊びに行くことも少なくなっている。 この生活がもう1年近く続いているけどまだ慣れきってなくてつらい。 あと1年か2年はこんな生活が続くと見ているけど、そう考えるだけでげんなりしてしまう。
その一方でオンラインで遊ぶ機会が増えた。オンラインボドゲ、オンライン麻雀、switchとか。 zoom飲みも何度かやったけど、画面越しに飲むだけではあんまり盛り上がらなくて微妙。 遊びがセットになっているのがよい。開拓の余地あり。
住まい 新卒で東京に来てからずっと住んでた部屋から2月に引っ越した。1Kでアリだらけの部屋から脱出。 ちょうどコロナ騒ぎが2月くらいから本格的に始まったのでタイミングは完璧だった。 前に住んでいたところは飲食店も少なく静かなファミリー住宅街といった感じで気に入っていたけど、せっかく東京にいるので次の部屋はそれよりも栄えている場所から選んだ。 結果的にはそれが当たりで、ほどよく栄えているほうが生活しやすくて満足。あと、ラーメン屋が多くて最高。
個人開発 9月に2年ぶりくらいに個人アプリをリリースした。途中で飽きてほったらかしにしていたけどやっとこさ完成させた。 開発始めたのが2018年の10月とかなので2年がかり。こまめに作るのが大事。ユーザの数も多いとは言いがたいけど、個人アプリにしては一定の人数に使われていていい感じ。このまま地道に育てていきたい。
ストアのリンク
仕事 基本的にはiOSアプリの開発をやっていて、夏場に4ヶ月くらいバックエンドのチームに移動して仕事した。 これまでiOSアプリの開発の仕事ばかりやっているのが自分の中で不安な部分だったので、まとまった期間でバックエンドの開発を知ることができたのは自分のためになってよかったと思う。 その一方で、戦力になれていたかというと微妙な感じ。 次にバックエンドに行くときはもっと戦力になれるよう働きたい。
あと、自分が長い間デモ作ったり企画を考えていた機能をちゃんと世に出すことができたのがよかった。
2021 2021はブログを書く。まだまだコロナが続きそうだけど、自分で面白いことを見つけて楽しくやっていきたい。</description>
    </item>
    
    <item>
      <title>月刊秘伝 12月号</title>
      <link>https://teakun.dev/entry/2020-12-13-hiden/</link>
      <pubDate>Sun, 13 Dec 2020 18:00:00 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-12-13-hiden/</guid>
      <description>最近、普段買わないような分野の雑誌を買ってみる遊びをしている。 ほとんど知らない分野なので意外な発見があったり、自分の得意な分野とのちょっとした共通点が見つけられたりしておもしろい。最近読んだのが「月刊秘伝」という雑誌。この雑誌では武道全般を扱っていて、その中でも&amp;quot;秘伝&amp;quot;とされている技について教えてくれる。12月号は&amp;quot;居合・抜刀&amp;quot;特集ということで、居合斬りについて色んな角度から特集されていた。
   秘伝公式サイトより。特集されていた居合の演武が見れる 特に剣道をやっていたわけではないので、体捌きの説明とかは見てもよくわからなかったけど、居合斬りで剣を早くするためのアプローチの話がおもしろかった。剣を早くするためのアプローチは大きく分けると2つになって、1つは剣の動き自体を速く動かすこと、もう1つは剣の体感の速度を上げること、らしい。この話を読んで、スマホアプリの高速化の話と似てるなと思った。アプリで例えると、剣の動きを速くするのはAPIのレスポンスを速くすること、剣の体感の速度を上げるのはアプリのローディング中にアニメーションを見せることに似てる。まあ、似てるなと思っただけで仕事に活かせるような教訓はない…
居合だけでもいろんな流派の師範が出てくる。1つ2つとかではなくて10以上の流派が出てて、居合だけでこんなにあるのかと驚いた。 解説している師範のプロフィールの欄をよく読むと、1人で複数の流派を継承している人が複数いた。 中には第十何代〇〇流師範、第三十何代〇〇流継承者、みたいな肩書を一人で4つくらい兼務してる人もいる。 継承できるような人が減っているから自然とこうなるんだろうけど、これだけ兼ねると説得力に欠ける気がする。北斗神拳と南斗聖拳を両方継承している使い手はいない。
あと、新陰流という居合の流派が紹介されてた。三輪ちゃんの元ネタかな。</description>
    </item>
    
    <item>
      <title>SwiftのPropertyWrapperを知る</title>
      <link>https://teakun.dev/entry/2020-12-08-swift-propertywrapper/</link>
      <pubDate>Tue, 08 Dec 2020 00:48:36 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-12-08-swift-propertywrapper/</guid>
      <description>PropertyWrapperについて1から勉強。
一番シンプルなパターン まずは一番かんたんな例から。始めは色のRGBを表す場合を考えてみる。それぞれの値は0~255で表されていて、それ範囲外の値が来た場合は範囲に収まるようにしたい。ここではRGBを表すためのPropertyWrapperとして、ColorValueを定義する。
@propertyWrapper struct ColorValue { private var value: Int init() { value = 0 } var wrappedValue: Int { get { return value } set { value = min(255, max(0, newValue)) } } } struct Color { @ColorValue var r: Int // @ColorValueのwrappedValueの型と変数の型が一致しないといけない @ColorValue var g: Int @ColorValue var b: Int } var color = Color() color.r = 100 print(color.r) // 100 color.g = 999 print(color.g) // 355 color.</description>
    </item>
    
    <item>
      <title>multipart/form-data入門</title>
      <link>https://teakun.dev/entry/2020-12-02-multipartformdata/</link>
      <pubDate>Wed, 02 Dec 2020 01:43:18 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-12-02-multipartformdata/</guid>
      <description>仕事でmultipart/form-dataでファイルアップロードをする実装することになったけど、どういうものか全然わかっていないので調べる。
そもそもなにか HTTPのリクエストで複数のデータをまとめて送るための仕組み。 例えば、プロフィールを登録するような場合に、名前と画像をセットでアップロードするようなときに使う。
header Content-Typeにはこのような指定が入る。
Content-Type: multipart/form-data; boundary=--&amp;lt;バウンダリ文字列&amp;gt;\r\n バウンダリ文字列というのがミソで、これが送信したい複数のデータの区切りになる。 なので、この文字列はデータ中には出てこないような無難な乱数が入るのがよい。
body bodyの例。1つ目にテキスト、2つ目に画像を送るような場合で考える。
--&amp;lt;バウンダリ文字列&amp;gt;\r\n Content-Disposition: form-data; name=&amp;quot;&amp;lt;1つ目の名前&amp;gt;&amp;quot;\r\n \r\n &amp;lt;1つ目のデータ&amp;gt; --&amp;lt;バウンダリ文字列&amp;gt;\r\n Content-Disposition: form-data; name=&amp;quot;&amp;lt;2つ目名前&amp;gt;&amp;quot;; filename=&amp;quot;&amp;lt;ファイル名&amp;gt;&amp;quot;\r\n Content-Type: image/jpeg\r\n \r\n &amp;lt;画像のバイナリ&amp;gt; --&amp;lt;バウンダリ文字列&amp;gt;--\r\n  headerで定義したバウンダリ文字列でデータの区切りを表す。バウンダリ文字列は--から始めないといけない制約がある。 すべての改行は\r\nにする。(この改行の方法をCRLFと呼ぶらしい) 各データの先頭ではContent-Dispositionを指定していて、これがそのデータの情報を表している。あとは必要に応じてContent-Typeなどを指定する。 区切りの最後にもバウンダリ文字列を追加を追加する必要がある。この場合はバウンダリ文字列の最後にも--をつけないといけない。  参考  https://satox.hatenadiary.jp/entry/20110726/1311665904 https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition https://marusunrise2.blogspot.com/2014/06/lfcrcrlf.html  </description>
    </item>
    
    <item>
      <title>ブログ作った</title>
      <link>https://teakun.dev/entry/2020-11-24-start-blog/</link>
      <pubDate>Tue, 24 Nov 2020 23:59:35 +0900</pubDate>
      
      <guid>https://teakun.dev/entry/2020-11-24-start-blog/</guid>
      <description>新しくブログを作った。
一年くらい前まで使っていたはてなブログは今はちょっと勢いがなさそうで、使い続けるのは微妙かな、と思うようになってしまった。 他のブログプラットフォームを調べてみたりもしたけど、今どきはnoteだ！notionだ！とか、新興勢力が出てきて何がなんやらよくわからない。 他のプラットフォームに乗り換えたとしても、また新しい勢力が出てくるのは目に見えている。そんなことを気にしながらブログ書くらいなら、ちょうどweb技術のお勉強にもなりそうだしいっそ自分で作るか〜となった。 で、今回の新ブログにいたる。
新しくブログを作るにあたって、以下のようなことを考えた。
 維持費がかからないか メンテナンスが楽かどうか  wordpressとかはアップデートとかあるよね？重いしめんどくさい   いざとなった脱出しやすいかどうか  独自記法だと他のブログに移行するのが難しい markdownで書きたい    ということで新ブログはとりあえずHugo + Github Pagesで作ってみた。 そのうち独自ドメインとかも取って当ててみたい。
しょうもないけど、Hugoでは記事のパスを自分で決めないといけなくて、ここでちょっと悩んだ。 結果的には $HOME/entry/{記事} にした。 どこに悩むポイントがあるかというと、entry の部分。他の候補としてはposts、articlesあたり。 意外とこれ悩みどころじゃない？ 自分は文字数の少なさと何となくの好みでentryにした。 調べてるとこういう記事もあったりする。 でも結局は好みだし好きなやつにしたらいいよね・・・</description>
    </item>
    
  </channel>
</rss>
